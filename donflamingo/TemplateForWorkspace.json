{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "donflamingo"
		},
		"AzureDataLakeStorageFinalStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorageFinalStorage'"
		},
		"donflamingo-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'donflamingo-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:donflamingo.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureDataLakeStorageFinalStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://freefinalstorageaccount.dfs.core.windows.net/"
		},
		"donflamingo-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsestorage348.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorageFinalStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageFinalStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorageFinalStorage_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/donflamingo-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('donflamingo-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/donflamingo-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('donflamingo-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/External table creation script')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nCREATE EXTERNAL DATA SOURCE Patient_Data_Source\nWITH(\n    LOCATION='abfss://output@freefinalstorageaccount.dfs.core.windows.net'\n    );\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDelimitedTextFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDelimitedTextFormat] \n\tWITH ( FORMAT_TYPE = DELIMITEDTEXT ,\n\t       FORMAT_OPTIONS (\n\t\t\t FIELD_TERMINATOR = ',',\n\t\t\t FIRST_ROW = 1,\n\t\t\t USE_TYPE_DEFAULT = FALSE\n\t\t\t))\nGO\n\nCREATE EXTERNAL TABLE Patient\n(\n    [Patient_ID] bigint,\n\t[Name] nvarchar(4000),\n\t[Age] bigint,\n\t[Gender] nvarchar(4000),\n\t[Contact_Info] nvarchar(4000),\n\t[Medical_History] nvarchar(4000),\n\t[Active_Flag] nvarchar(4000)\n)\nWITH\n(\n    LOCATION='raw/patient/Dim_Patient_Large.csv',\n    DATA_SOURCE=Patient_Data_Source,\n    FILE_FORMAT=[SynapseDelimitedTextFormat]\n);\n\nSELECT top 10 * FROM dbo.Patient;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "raw",
						"poolName": "Built-in"
					},
					"resultLimit": -1
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/read_from_files_script')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP 10 * FROM\nOPENROWSET(\n    BULK ('abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/patient/Dim_Patient_Large.csv',\n    'https://freefinalstorageaccount.blob.core.windows.net/output/raw/patient/Dim_Patient_Large.csv'),\n    FORMAT ='CSV',\n    PARSER_VERSION='2.0',\n    HEADER_ROW=TRUE\n) AS R",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/view_creation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE VIEW dbo.Patient AS\nSELECT * FROM\nOPENROWSET(\n    BULK ('abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/patient/Dim_Patient_Large.csv',\n    'https://freefinalstorageaccount.blob.core.windows.net/output/raw/patient/Dim_Patient_Large.csv'),\n    FORMAT ='CSV',\n    PARSER_VERSION='2.0',\n    HEADER_ROW=TRUE\n) AS R;\n\nSELECT * FROM dbo.Patient;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ICU_Patient_7_Days_Reminder_Call_ETL')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "BigDataDev",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "bc546cd2-8a16-4916-9fd7-2018df9e042f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/2075028d-e3d3-4030-84e2-bb118eb5f397/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/donflamingo/bigDataPools/BigDataDev",
						"name": "BigDataDev",
						"type": "Spark",
						"endpoint": "https://donflamingo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/BigDataDev",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.types import StructType,StructField,StringType,IntegerType,DateType"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"schema=StructType([StructField('Visit_ID',IntegerType(),True),\n",
							"StructField('Patient_ID',IntegerType(),True),\n",
							"StructField('Admission_Date',DateType(),True),\n",
							"StructField('Discharge_Date',DateType(),True),\n",
							"StructField('Doctor_ID',IntegerType(),True),\n",
							"StructField('Treatment_ID',IntegerType(),True),\n",
							"StructField('ICU_Stay',StringType(),True),\n",
							"StructField('Total_Cost',IntegerType(),True)])"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"source": [
							"visits_df=spark.read.option('header',True).schema(schema).csv('abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/visits/Fact_Patient_Visits_Large.csv')"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"visits_df.show(20,truncate=False)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"patient_schema=StructType([StructField('Patient_ID',IntegerType(),True),\n",
							"StructField('Name',StringType(),True),\n",
							"StructField('Age',IntegerType(),True),\n",
							"StructField('Gender',StringType(),True),\n",
							"StructField('Contact_Info',StringType(),True),\n",
							"StructField('Medical_History',StringType(),True),\n",
							"StructField('Active_Flag',StringType(),True)])"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"patient_df=spark.read.option('header',True).schema(patient_schema).csv('abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/patient/Dim_Patient_Large.csv')"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"jnr_patient_visit_df=visits_df.join(patient_df,visits_df.Patient_ID==patient_df.Patient_ID,'inner').select(visits_df.ICU_Stay,visits_df.Discharge_Date,patient_df.Name,patient_df.Contact_Info)"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import functions as F"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ICU_released_patient_df=jnr_patient_visit_df.filter(\"ICU_Stay='Yes'\").withColumn('nextVisitDate',F.add_months(F.col('Discharge_Date'),1))"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ICU_released_patient_next_visit_reminder_call_df=ICU_released_patient_df.filter(F.col('nextVisitDate')==F.current_date()+7)"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ICU_released_patient_next_visit_reminder_call_df.write.mode('overwrite').csv('abfss://output@freefinalstorageaccount.dfs.core.windows.net/enterprise/patient/sevendays/reminderCalls/ICU_patinet_next_visits.csv')"
						],
						"outputs": [],
						"execution_count": 41
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Enterprise_Doctor_Visits_Summary')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Enterprise_Pipelines"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "69de31c6-fdf4-4551-a68a-51a6d6b60b5f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<center>This Notebook is used to create Patient_Treatment_History Table in Enterprise Level.</center>\n",
							"\n",
							"<table>\n",
							"<tr><th>Title</th><th>Description</th></tr>\n",
							"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
							"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
							"<tr><td>DataSets Used</td><td><ul><li>refine_doctor</li>\n",
							"<li>refine_visit</li>\n",
							"</ul></td></tr>\n",
							"</table>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"doctorDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/doctor/table/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"visitsDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/visits/table/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"doctorVisitJNRDF=doctorDF.alias(\"D\").join(visitsDF.alias(\"V\"),doctorDF.Doctor_ID==visitsDF.Doctor_ID,\"inner\").Select(F.col(\"D.Doctor_ID\"),\n",
							"        F.col(\"D.Name\").alias(\"Doctor_Name\"),\n",
							"        F.col(\"V.Visit_ID\"),\n",
							"        F.col(\"V.Total_Cost\"),\n",
							"        F.col(\"V.Patient_ID\"),\n",
							"        F.col(\"V.Discharge_Date\"),\n",
							"        F.col(\"V.Admission_Date\"))\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"doctorVisitSummaryDF=doctorVisitJNRDF.groupBy(\"Doctor_ID\", \"Name\") \\\n",
							"    .agg(\n",
							"        F.count(\"Visit_ID\").alias(\"Total_Visits_Attended\"),  \n",
							"        F.sum(\"Total_Cost\").alias(\"Total_Revenue_Generated\"),  \n",
							"        F.countDistinct(\"Patient_ID\").alias(\"Unique_Patients\"),  \n",
							"        F.avg(F.datediff(\"Discharge_Date\", \"Admission_Date\")).alias(\"Avg_Length_of_Stay_Per_Patient\")  \n",
							"    )"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path = \"abfss://output@freefinalstorageaccount.dfs.core.windows.net/enterprise/doctorVisits/table/\"\n",
							"\n",
							"try:\n",
							"    # Try to access the Delta table\n",
							"    doctorVisitSummaryEnterpriseDF= DeltaTable.forPath(spark, delta_table_path)\n",
							"\n",
							"    # If the table exists, perform the merge operation\n",
							"    doctorVisitSummaryEnterpriseDF.alias(\"target\").merge(\n",
							"        doctorVisitSummaryDF.alias(\"source\"),\n",
							"        \"target.Doctor_ID = source.Doctor_ID\",\n",
							"        \"target.Name = source.Name\"\n",
							"    ).whenMatchedUpdateAll(\n",
							"    ).whenNotMatchedInsertAll(\n",
							"    ).execute()\n",
							"\n",
							"except AnalysisException as e:\n",
							"    print(\"Delta table does not exist. Creating a new table...\")\n",
							"    doctorVisitSummaryDF.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Enterprise_ICU_Stay_Analysis')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Enterprise_Pipelines"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "04a547a2-5f64-4339-bcae-e58f85c1ca52"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<center>This Notebook is used to create Treatment_Cost_Analysis Table in Enterprise Level.</center>\n",
							"\n",
							"<table>\n",
							"<tr><th>Title</th><th>Description</th></tr>\n",
							"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
							"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
							"<tr><td>DataSets Used</td><td><ul><li>refine_treatment</li>\n",
							"<li>refine_visit</li>\n",
							"</ul></td></tr>\n",
							"</table>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"visitsDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/visits/table/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ICU_Stay_AnalysisDF=visitDF \\\n",
							"    .filter(visitDF.ICU_Stay == 'Yes') \\\n",
							"    .groupBy(\"Patient_ID\") \\\n",
							"    .agg(\n",
							"        F.count(\"Visit_ID\").alias(\"Total_ICU_Visits\"),\n",
							"        F.sum(\"Total_Cost\").alias(\"Total_Cost_Incurred\"),\n",
							"        F.avg(F.datediff(\"Discharge_Date\", \"Admission_Date\")).alias(\"Avg_Length_of_ICU_Stay\")\n",
							"    ) \\\n",
							"    .orderBy(F.desc(\"Total_Cost_Incurred\"))\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path = \"abfss://output@freefinalstorageaccount.dfs.core.windows.net/enterprise/ICUStayAnalysis/table/\"\n",
							"\n",
							"try:\n",
							"    # Try to access the Delta table\n",
							"    ICU_Stay_AnalysisEnterpriseDF= DeltaTable.forPath(spark, delta_table_path)\n",
							"\n",
							"    # If the table exists, perform the merge operation\n",
							"    ICU_Stay_AnalysisEnterpriseDF.alias(\"target\").merge(\n",
							"        ICU_Stay_AnalysisDF.alias(\"source\"),\n",
							"        \"target.Patient_ID = source.Patient_ID\"\n",
							"    ).whenMatchedUpdateAll(\n",
							"    ).whenNotMatchedInsertAll(\n",
							"    ).execute()\n",
							"\n",
							"except AnalysisException as e:\n",
							"    print(\"Delta table does not exist. Creating a new table...\")\n",
							"    ICU_Stay_AnalysisDF.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Enterprise_Patient_Treatment_History')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Enterprise_Pipelines"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fdc85052-d74c-4187-8727-5d7c7e01c50b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<center>This Notebook is used to create Patient_Treatment_History Table in Enterprise Level.</center>\n",
							"\n",
							"<table>\n",
							"<tr><th>Title</th><th>Description</th></tr>\n",
							"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
							"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
							"<tr><td>DataSets Used</td><td><ul><li>refine_patient</li>\n",
							"<li>refine_visit</li>\n",
							"<li>refine_treatment</li></ul></td></tr>\n",
							"</table>"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"patientDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/patient/table/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"doctorDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/doctor/table/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"visitsDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/visits/table/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"treatmentDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/treatments/table/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"patientVisitJNRDF=patientDF.alias(\"P\").join(visitsDF.alias(\"V\"),patientDF.Patient_ID==visitsDF.Patient_ID,\"inner\").Select(F.col(\"P.Patient_ID\"),\n",
							"        F.col(\"P.Name\").alias(\"Patinet_Name\"),\n",
							"        F.col(\"V.Admission_Date\"),\n",
							"        F.col(\"V.Discharge_Date\"),\n",
							"        F.col(\"V.ICU_Stay\"),\n",
							"        F.col(\"V.Total_Cost\"))\n",
							"\n",
							"patientVisitDoctorJNRDF=patientVisitJNRDF.join(doctorDF,patientVisitJNRDF.Doctor_ID==doctorDF.Doctor_ID,\"inner\")\n",
							"\n",
							"patientVisitDoctorTreatmentJNRDF=patientVisitDoctorJNRDF.join(treatmentDF,patientVisitDoctorJNRDF.Treatment_ID==treatmentDF.Treatment_ID,\"inner\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"patientTreatmentHistoryDF=patientVisitDoctorTreatmentJNRDF.select(F.col(\"Patient_ID\"),\n",
							"    F.col(\"Patient_Name\"),\n",
							"    F.col(\"Doctor_ID\"),\n",
							"    F.col(\"Name\").alias(\"Doctor_Name\"),\n",
							"    F.col(\"Specialization\"),\n",
							"    F.col(\"Treatment_ID\"),\n",
							"    F.col(\"Treatment_Type\"),\n",
							"    F.col(\"V.Admission_Date\"),\n",
							"    F.col(\"V.Discharge_Date\"),\n",
							"    F.col(\"V.ICU_Stay\"),\n",
							"    F.col(\"V.Total_Cost\"))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path = \"abfss://output@freefinalstorageaccount.dfs.core.windows.net/enterprise/patientTreatmentHistory/table/\"\n",
							"\n",
							"try:\n",
							"    # Try to access the Delta table\n",
							"    patientTreatmentHistoryEnterpriseDF= DeltaTable.forPath(spark, delta_table_path)\n",
							"\n",
							"    # If the table exists, perform the merge operation\n",
							"    patientTreatmentHistoryEnterpriseDF.alias(\"target\").merge(\n",
							"        patientTreatmentHistoryDF.alias(\"source\"),\n",
							"        \"target.patient_id = source.patient_id\",\n",
							"        \"target.Admission_Date = source.Admission_Date\",\n",
							"        \"target.Discharge_Date = source.Discharge_Date\"\n",
							"    ).whenMatchedUpdateAll(\n",
							"    ).whenNotMatchedInsertAll(\n",
							"    ).execute()\n",
							"\n",
							"except AnalysisException as e:\n",
							"\n",
							"    print(\"Delta table does not exist. Creating a new table...\")\n",
							"    \n",
							"    patientTreatmentHistoryDF.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Enterprise_Patient_Visit_Frequency')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Enterprise_Pipelines"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c62b4cb4-62fe-429b-b066-c6b569645cbf"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<center>This Notebook is used to create Patient_Visit_Frequency Table in Enterprise Level.</center>\n",
							"\n",
							"<table>\n",
							"<tr><th>Title</th><th>Description</th></tr>\n",
							"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
							"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
							"<tr><td>DataSets Used</td><td><ul>\n",
							"<li>refine_visit</li>\n",
							"</ul></td></tr>\n",
							"</table>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"visitsDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/visits/table/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"patientVisitFrequencyDF=visitDF \\\n",
							"    .groupBy(\"Patient_ID\") \\\n",
							"    .agg(\n",
							"        F.count(\"Visit_ID\").alias(\"Total_Visits\"),\n",
							"        F.sum(\"Total_Cost\").alias(\"Total_Cost_Incured\"),\n",
							"        F.avg(\"Total_Cost\").alias(\"Avg_Cost_Per_Visit\")\n",
							"    ) \\\n",
							"    .orderBy(F.desc(\"Total_Visits\"))\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path = \"abfss://output@freefinalstorageaccount.dfs.core.windows.net/enterprise/patientVisitFrequency/table/\"\n",
							"\n",
							"try:\n",
							"    # Try to access the Delta table\n",
							"    patientVisitFrequencyEnterpriseDF= DeltaTable.forPath(spark, delta_table_path)\n",
							"\n",
							"    # If the table exists, perform the merge operation\n",
							"    patientVisitFrequencyEnterpriseDF.alias(\"target\").merge(\n",
							"        patientVisitFrequencyDF.alias(\"source\"),\n",
							"        \"target.Patient_ID = source.Patient_ID\"\n",
							"    ).whenMatchedUpdateAll(\n",
							"    ).whenNotMatchedInsertAll(\n",
							"    ).execute()\n",
							"\n",
							"except AnalysisException as e:\n",
							"    print(\"Delta table does not exist. Creating a new table...\")\n",
							"    patientVisitFrequencyDF.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Enterprise_Treatment_Cost_Analysis')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Enterprise_Pipelines"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "81377136-ea36-44e7-98ee-ba4012c7489b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<center>This Notebook is used to create Treatment_Cost_Analysis Table in Enterprise Level.</center>\n",
							"\n",
							"<table>\n",
							"<tr><th>Title</th><th>Description</th></tr>\n",
							"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
							"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
							"<tr><td>DataSets Used</td><td><ul><li>refine_treatment</li>\n",
							"<li>refine_visit</li>\n",
							"</ul></td></tr>\n",
							"</table>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"treatmentDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/treatments/table/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"visitsDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/visits/table/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"treatmentCostAnalysisDF=treatmentDF.alias(\"t\") \\\n",
							"    .join(visitDF.alias(\"v\"), \"Treatment_ID\") \\\n",
							"    .groupBy(\"t.Treatment_ID\", \"t.Treatment_Type\") \\\n",
							"    .agg(\n",
							"        F.count(\"v.Visit_ID\").alias(\"Total_Treatments\"),\n",
							"        F.sum(\"t.Cost\").alias(\"Total_Cost\"),\n",
							"        F.avg(\"t.Cost\").alias(\"Avg_Cost_Per_Treatment\")\n",
							"    ) \\\n",
							"    .orderBy(F.desc(\"Total_Cost\"))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path = \"abfss://output@freefinalstorageaccount.dfs.core.windows.net/enterprise/treatmentCostAnalysis/table/\"\n",
							"\n",
							"try:\n",
							"    # Try to access the Delta table\n",
							"    treatmentCostAnalysisEnterpriseDF= DeltaTable.forPath(spark, delta_table_path)\n",
							"\n",
							"    # If the table exists, perform the merge operation\n",
							"    treatmentCostAnalysisEnterpriseDF.alias(\"target\").merge(\n",
							"        treatmentCostAnalysisDF.alias(\"source\"),\n",
							"        \"target.Treatment_ID = source.Treatment_ID\",\n",
							"        \"target.Treatment_Type = source.Treatment_Type\"\n",
							"    ).whenMatchedUpdateAll(\n",
							"    ).whenNotMatchedInsertAll(\n",
							"    ).execute()\n",
							"\n",
							"except AnalysisException as e:\n",
							"    print(\"Delta table does not exist. Creating a new table...\")\n",
							"    treatmentCostAnalysisDF.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Refine_Doctor')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Refine_Pipelines"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "BigDataDev",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "956d9e10-92d1-477d-a28a-d961ce99f7b0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/2075028d-e3d3-4030-84e2-bb118eb5f397/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/donflamingo/bigDataPools/BigDataDev",
						"name": "BigDataDev",
						"type": "Spark",
						"endpoint": "https://donflamingo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/BigDataDev",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<center><b> This notebook is used to create doctor table in refine layer</b></center>\n",
							"<table>\n",
							"<tr><th>Title</th><th>Description</th></tr>\n",
							"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
							"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
							"<tr><td>Datasets Used</td><td>/raw/doctor/Patient_YYYY_MM_DD.csv</td></tr>\n",
							"</table>"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from datetime import datetime,timedelta\n",
							"from notebookutils import mssparkutils"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, BooleanType\n",
							"from pyspark.sql import functions as F"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"currentDate=datetime.today()-timedelta(days=1)\n",
							"currentDate=currentDate.strftime('%Y-%m-%d')"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"fileName='Doctor'+'_'+currentDate"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"rawDoctorDFSchema = StructType([\n",
							"    StructField(\"Doctor_ID\", IntegerType(), nullable=True),\n",
							"    StructField(\"Name\", StringType(), nullable=True),\n",
							"    StructField(\"Specialization\", StringType(), nullable=True),\n",
							"    StructField(\"Shift_Timing\", StringType(), nullable=True),\n",
							"    StructField(\"Contact_Info\", StringType(), nullable=True)\n",
							"])"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rawDoctorDF=spark.read.option(\"header\",True).schema(rawDoctorDFSchema).csv(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/doctor/{fileName}')"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rawDoctorDF.show(10)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rawDoctorDF = rawDoctorDF.withColumn(\"Name\", \n",
							"                   F.when(rawDoctorDF.Name == 'None', None).otherwise(rawDoctorDF.Name)) \\\n",
							"                   .withColumn(\"Specialization\", \n",
							"                   F.when(rawDoctorDF.Specialization == 'None', None).otherwise(rawDoctorDF.Specialization)) \\\n",
							"                   .withColumn(\"Shift_Timing\", \n",
							"                   F.when(rawDoctorDF.Shift_Timing == 'None', None).otherwise(rawDoctorDF.Shift_Timing)) \\\n",
							"                   .withColumn(\"Contact_Info\", \n",
							"                   F.when(rawDoctorDF.Contact_Info == 'None', None).otherwise(rawDoctorDF.Contact_Info))"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refinedDoctorDF1=rawDoctorDF.fillna(0,['Doctor_ID']).fillna('Unknown',['Name']) \\\n",
							".fillna('Unknown',['Specialization']).fillna('000-000-0000',['Contact_Info']).fillna('Unknown',['Shift_Timing'])"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refinedDoctorDF2=refinedDoctorDF1.dropDuplicates(['Name','Specialization','Contact_Info'])"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refinedDoctorDFFinal=refinedDoctorDF2.withColumn('Contact_Info',F.concat(F.lit('+91 '),F.regexp_replace('Contact_Info','-',''))) \\\n",
							".withColumn('Contact_Info',F.regexp_replace('Contact_Info','x.','')) \\\n",
							".withColumn('Contact_Info',F.regexp_replace('Contact_Info','\\(','')) \\\n",
							".withColumn('Contact_Info',F.regexp_replace('Contact_Info','\\)','')) \\\n",
							".withColumn('Contact_Info',F.substring('Contact_Info',0,14)) \\\n",
							".withColumn('File_Name',F.lit(fileName))"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path=\"abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/doctor/table/\"\n",
							"\n",
							"try:\n",
							"    doctorsRefineTable = DeltaTable.forPath(spark,delta_table_path)\n",
							"\n",
							"    doctorsRefineTable.alias(\"target\").merge(\n",
							"        refinedDoctorDFFinal.alias(\"source\"),\n",
							"        \"target.doctor_id = source.doctor_id\"\n",
							"    ).whenMatchedUpdateAll(\n",
							"    ).whenNotMatchedInsertAll(\n",
							"    ).execute()\n",
							"except Exception as e:\n",
							"\n",
							"    print(\"Delta table does not exist. Creating a new table...\")\n",
							"    \n",
							"    # Write the DataFrame to Delta format for the first time\n",
							"    daily_df.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.mkdirs(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/archieve/doctor/{currentDate}')"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.mv(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/doctor/{fileName}',f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/archieve/doctor/{currentDate}/')"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Refine_Patient')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Refine_Pipelines"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "BigDataDev",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a1541631-0f9b-4dc6-8f3f-1fedf8ec260c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/2075028d-e3d3-4030-84e2-bb118eb5f397/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/donflamingo/bigDataPools/BigDataDev",
						"name": "BigDataDev",
						"type": "Spark",
						"endpoint": "https://donflamingo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/BigDataDev",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<center><b> This notebook is used to create patient table in refine layer</b></center>\n",
							"<table>\n",
							"<tr><th>Title</th><th>Description</th></tr>\n",
							"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
							"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
							"<tr><td>Datasets Used</td><td>/raw/patient/Patient_YYYY_MM_DD.csv</td></tr>\n",
							"</table>"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from datetime import datetime,timedelta\n",
							"from notebookutils import mssparkutils"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, BooleanType\n",
							"from pyspark.sql import functions as F"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"currentDate=datetime.today()-timedelta(days=1)\n",
							"currentDate=currentDate.strftime('%Y-%m-%d')"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"fileName='Patient'+'_'+currentDate"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"rawPatientDFSchema = StructType([\n",
							"    StructField(\"Patient_ID\", IntegerType(), True),\n",
							"    StructField(\"Name\", StringType(), True),\n",
							"    StructField(\"Age\", IntegerType(), True),\n",
							"    StructField(\"Gender\", StringType(), True),\n",
							"    StructField(\"Contact_Info\", StringType(), True),\n",
							"    StructField(\"Medical_History\", StringType(), True),\n",
							"    StructField(\"Active_Flag\", BooleanType(), True)\n",
							"])"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rawPatientDF=spark.read.option(\"header\",True).schema(rawPatientDFSchema).csv(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/patient/{fileName}')"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"avgAge=rawPatientDF.agg(F.avg('Age')).first()[0]"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rawPatientDF = rawPatientDF.withColumn(\"Name\", \n",
							"                   F.when(rawPatientDF.Name == 'None', None).otherwise(rawPatientDF.Name)) \\\n",
							"                   .withColumn(\"Gender\", \n",
							"                   F.when(rawPatientDF.Gender == 'None', None).otherwise(rawPatientDF.Gender)) \\\n",
							"                   .withColumn(\"Contact_Info\", \n",
							"                   F.when(rawPatientDF.Contact_Info == 'None', None).otherwise(rawPatientDF.Contact_Info)) \\\n",
							"                   .withColumn(\"Medical_History\", \n",
							"                   F.when(rawPatientDF.Medical_History == 'None', None).otherwise(rawPatientDF.Medical_History))"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refinedPatientDF1=rawPatientDF.fillna(0,['Patient_ID']).fillna('Unknown',['Name']).fillna(avgAge,['Age']) \\\n",
							".fillna('Unknown',['Gender']).fillna('000-000-0000',['Contact_Info']).fillna('Unknown',['Medical_History'])"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refinedPatientDF2=refinedPatientDF1.dropDuplicates(['Name','Age','Gender','Contact_Info'])"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refinedPatientDFFinal=refinedPatientDF2.withColumn('Contact_Info',F.concat(F.lit('+91 '),F.regexp_replace('Contact_Info','-',''))) \\\n",
							".withColumn('File_Name',F.lit(fileName))"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path=\"abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/patient/table/\"\n",
							"\n",
							"try:\n",
							"    patientsRefineTable = DeltaTable.forPath(spark,delta_table_path)\n",
							"\n",
							"    patientsRefineTable.alias(\"target\").merge(\n",
							"        refinedPatientDFFinal.alias(\"source\"),\n",
							"        \"target.patient_id = source.patient_id\"\n",
							"    ).whenMatchedUpdateAll(\n",
							"    ).whenNotMatchedInsertAll(\n",
							"    ).execute()\n",
							"except Exception as e:\n",
							"\n",
							"    print(\"Delta table does not exist. Creating a new table...\")\n",
							"    \n",
							"    # Write the DataFrame to Delta format for the first time\n",
							"    daily_df.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.mkdirs(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/archieve/patient/{currentDate}')"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.mv(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/patient/{fileName}',f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/archieve/patient/{currentDate}/')"
						],
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Refine_Treatments')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Refine_Pipelines"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "BigDataDev",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "02836d73-1704-4521-a066-272084b3254c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/2075028d-e3d3-4030-84e2-bb118eb5f397/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/donflamingo/bigDataPools/BigDataDev",
						"name": "BigDataDev",
						"type": "Spark",
						"endpoint": "https://donflamingo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/BigDataDev",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<center><b> This notebook is used to create treatment table in refine layer</b></center>\n",
							"<table>\n",
							"<tr><th>Title</th><th>Description</th></tr>\n",
							"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
							"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
							"<tr><td>Datasets Used</td><td>/raw/treatment/Treatment_YYYY_MM_DD.csv</td></tr>\n",
							"</table>"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from datetime import datetime,timedelta\n",
							"from notebookutils import mssparkutils"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, BooleanType\n",
							"from pyspark.sql import functions as F"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"currentDate=datetime.today()-timedelta(days=1)\n",
							"currentDate=currentDate.strftime('%Y-%m-%d')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"fileName='Treatment'+'_'+currentDate"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"rawTreatmentDFSchema = StructType([\n",
							"    StructField(\"Treatment_ID\", IntegerType(), nullable=False),\n",
							"    StructField(\"Treatment_Type\", StringType(), nullable=True),\n",
							"    StructField(\"Cost\", IntegerType(), nullable=False)\n",
							"])"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rawTreatmentDF=spark.read.option(\"header\",True).schema(rawTreatmentDFSchema).csv(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/treatment/{fileName}')"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rawTreatmentDF = rawTreatmentDF.withColumn(\"Treatment_Type\", \n",
							"                   F.when(rawTreatmentDF.Treatment_Type == 'None', None).otherwise(rawTreatmentDF.Treatment_Type)) "
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refinedTreatmentDF1=rawTreatmentDF.fillna('OutOfSyllabus',['Treatment_Type'])"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refinedTreatmentDFFinal=refinedTreatmentDF1.dropDuplicates(['Treatment_ID'])"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path=\"abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/treatment/table/\"\n",
							"\n",
							"try:\n",
							"    treatmentRefineTable = DeltaTable.forPath(spark,delta_table_path)\n",
							"\n",
							"    treatmentRefineTable.alias(\"target\").merge(\n",
							"        refinedTreatmentDFFinal.alias(\"source\"),\n",
							"        \"target.treatment_id = source.treatment_id\"\n",
							"    ).whenMatchedUpdateAll(\n",
							"    ).whenNotMatchedInsertAll(\n",
							"    ).execute()\n",
							"except Exception as e:\n",
							"\n",
							"    print(\"Delta table does not exist. Creating a new table...\")\n",
							"    \n",
							"    # Write the DataFrame to Delta format for the first time\n",
							"    daily_df.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.mkdirs(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/archieve/treatment/{currentDate}')"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.mv(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/treatment/{fileName}',f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/archieve/treatment/{currentDate}/')"
						],
						"outputs": [],
						"execution_count": 19
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Refine_Visits')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Refine_Pipelines"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "BigDataDev",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "28700af0-6c13-4ad2-be21-4afa246bc804"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/2075028d-e3d3-4030-84e2-bb118eb5f397/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/donflamingo/bigDataPools/BigDataDev",
						"name": "BigDataDev",
						"type": "Spark",
						"endpoint": "https://donflamingo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/BigDataDev",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<center><b> This notebook is used to create visits table in refine layer</b></center>\n",
							"<table>\n",
							"<tr><th>Title</th><th>Description</th></tr>\n",
							"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
							"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
							"<tr><td>Datasets Used</td><td>/raw/visits/Visit_YYYY_MM_DD.csv</td></tr>\n",
							"</table>"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from datetime import datetime,timedelta\n",
							"from notebookutils import mssparkutils"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, BooleanType, DateType\n",
							"from pyspark.sql import functions as F"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"currentDate=datetime.today()-timedelta(days=1)\n",
							"currentDate=currentDate.strftime('%Y-%m-%d')"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"fileName='Visit'+'_'+currentDate"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"rawVisitSchema = StructType([\n",
							"    StructField(\"Visit_ID\", IntegerType(), nullable=True),\n",
							"    StructField(\"Patient_ID\", IntegerType(), nullable=True),\n",
							"    StructField(\"Admission_Date\", DateType(), nullable=True),\n",
							"    StructField(\"Discharge_Date\", DateType(), nullable=True),\n",
							"    StructField(\"Doctor_ID\", IntegerType(), nullable=True),\n",
							"    StructField(\"Treatment_ID\", IntegerType(), nullable=True),\n",
							"    StructField(\"ICU_Stay\", StringType(), nullable=True),\n",
							"    StructField(\"Total_Cost\", IntegerType(), nullable=True)\n",
							"])"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rawVisitDF=spark.read.option(\"header\",True).schema(rawVisitSchema).csv(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/visits/{fileName}')"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rawVisitDF = rawVisitDF.withColumn(\"ICU_Stay\", \n",
							"                   F.when(rawVisitDF.ICU_Stay == 'None', None).otherwise(rawVisitDF.ICU_Stay))       "
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refinedVisitDF1=rawVisitDF.fillna('No Record',['ICU_Stay'])"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refinedVisitDFFinal=refinedVisitDF1.dropDuplicates(['Visit_ID','Patient_ID'])"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path=\"abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/treatment/table/\"\n",
							"\n",
							"try:\n",
							"    visitsRefineTable = DeltaTable.forPath(spark,delta_table_path)\n",
							"\n",
							"    visitsRefineTable.alias(\"target\").merge(\n",
							"        refinedVisitDFFinal.alias(\"source\"),\n",
							"        \"target.visit_id = source.visit_id\"\n",
							"    ).whenMatchedUpdateAll(\n",
							"    ).whenNotMatchedInsertAll(\n",
							"    ).execute()\n",
							"except Exception as e:\n",
							"\n",
							"    print(\"Delta table does not exist. Creating a new table...\")\n",
							"    \n",
							"    # Write the DataFrame to Delta format for the first time\n",
							"    daily_df.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.mkdirs(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/archieve/visits/{currentDate}')"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.mv(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/visits/{fileName}',f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/archieve/visits/{currentDate}/')"
						],
						"outputs": [],
						"execution_count": 23
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sparkConfigurationForceIcebergPackage')]",
			"type": "Microsoft.Synapse/workspaces/sparkConfigurations",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"configs": {
					"spark.jars.packages": "spark.jars.packages org.apache.iceberg:iceberg-spark-runtime-3.4_2.12:1.6.1",
					"spark.sql.extensions": "spark.sql.extensions org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions"
				},
				"created": "2024-10-10T14:24:39.6420000+05:30",
				"createdBy": "savitabelsare348@gmail.com",
				"annotations": [],
				"configMergeRule": {
					"artifact.currentOperation.spark.jars.packages": "replace",
					"artifact.currentOperation.spark.sql.extensions": "replace"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BigDataDev')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastasia"
		}
	]
}