{
	"name": "Load_Refine_Doctor",
	"properties": {
		"folder": {
			"name": "Refine_Pipelines"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "BigDataDev",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "956d9e10-92d1-477d-a28a-d961ce99f7b0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2075028d-e3d3-4030-84e2-bb118eb5f397/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/donflamingo/bigDataPools/BigDataDev",
				"name": "BigDataDev",
				"type": "Spark",
				"endpoint": "https://donflamingo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/BigDataDev",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<center><b> This notebook is used to create doctor table in refine layer</b></center>\n",
					"<table>\n",
					"<tr><th>Title</th><th>Description</th></tr>\n",
					"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
					"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
					"<tr><td>Datasets Used</td><td>/raw/doctor/Patient_YYYY_MM_DD.csv</td></tr>\n",
					"</table>"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from datetime import datetime,timedelta\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, BooleanType\n",
					"from pyspark.sql import functions as F"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"currentDate=datetime.today()-timedelta(days=1)\n",
					"currentDate=currentDate.strftime('%Y-%m-%d')"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fileName='Doctor'+'_'+currentDate"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"rawDoctorDFSchema = StructType([\n",
					"    StructField(\"Doctor_ID\", IntegerType(), nullable=True),\n",
					"    StructField(\"Name\", StringType(), nullable=True),\n",
					"    StructField(\"Specialization\", StringType(), nullable=True),\n",
					"    StructField(\"Shift_Timing\", StringType(), nullable=True),\n",
					"    StructField(\"Contact_Info\", StringType(), nullable=True)\n",
					"])"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rawDoctorDF=spark.read.option(\"header\",True).schema(rawDoctorDFSchema).csv(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/doctor/{fileName}')"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rawDoctorDF.show(10)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rawDoctorDF = rawDoctorDF.withColumn(\"Name\", \n",
					"                   F.when(rawDoctorDF.Name == 'None', None).otherwise(rawDoctorDF.Name)) \\\n",
					"                   .withColumn(\"Specialization\", \n",
					"                   F.when(rawDoctorDF.Specialization == 'None', None).otherwise(rawDoctorDF.Specialization)) \\\n",
					"                   .withColumn(\"Shift_Timing\", \n",
					"                   F.when(rawDoctorDF.Shift_Timing == 'None', None).otherwise(rawDoctorDF.Shift_Timing)) \\\n",
					"                   .withColumn(\"Contact_Info\", \n",
					"                   F.when(rawDoctorDF.Contact_Info == 'None', None).otherwise(rawDoctorDF.Contact_Info))"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"refinedDoctorDF1=rawDoctorDF.fillna(0,['Doctor_ID']).fillna('Unknown',['Name']) \\\n",
					".fillna('Unknown',['Specialization']).fillna('000-000-0000',['Contact_Info']).fillna('Unknown',['Shift_Timing'])"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"refinedDoctorDF2=refinedDoctorDF1.dropDuplicates(['Name','Specialization','Contact_Info'])"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"refinedDoctorDFFinal=refinedDoctorDF2.withColumn('Contact_Info',F.concat(F.lit('+91 '),F.regexp_replace('Contact_Info','-',''))) \\\n",
					".withColumn('Contact_Info',F.regexp_replace('Contact_Info','x.','')) \\\n",
					".withColumn('Contact_Info',F.regexp_replace('Contact_Info','\\(','')) \\\n",
					".withColumn('Contact_Info',F.regexp_replace('Contact_Info','\\)','')) \\\n",
					".withColumn('Contact_Info',F.substring('Contact_Info',0,14)) \\\n",
					".withColumn('File_Name',F.lit(fileName))"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delta_table_path=\"abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/doctor/table/\"\n",
					"\n",
					"try:\n",
					"    doctorsRefineTable = DeltaTable.forPath(spark,delta_table_path)\n",
					"\n",
					"    doctorsRefineTable.alias(\"target\").merge(\n",
					"        refinedDoctorDFFinal.alias(\"source\"),\n",
					"        \"target.doctor_id = source.doctor_id\"\n",
					"    ).whenMatchedUpdateAll(\n",
					"    ).whenNotMatchedInsertAll(\n",
					"    ).execute()\n",
					"except Exception as e:\n",
					"\n",
					"    print(\"Delta table does not exist. Creating a new table...\")\n",
					"    \n",
					"    # Write the DataFrame to Delta format for the first time\n",
					"    daily_df.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.mkdirs(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/archieve/doctor/{currentDate}')"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.mv(f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/raw/doctor/{fileName}',f'abfss://output@freefinalstorageaccount.dfs.core.windows.net/archieve/doctor/{currentDate}/')"
				],
				"execution_count": 1
			}
		]
	}
}