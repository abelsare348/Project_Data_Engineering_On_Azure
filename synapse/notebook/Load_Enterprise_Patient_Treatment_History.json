{
	"name": "Load_Enterprise_Patient_Treatment_History",
	"properties": {
		"folder": {
			"name": "Enterprise_Pipelines"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fdc85052-d74c-4187-8727-5d7c7e01c50b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<center>This Notebook is used to create Patient_Treatment_History Table in Enterprise Level.</center>\n",
					"\n",
					"<table>\n",
					"<tr><th>Title</th><th>Description</th></tr>\n",
					"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
					"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
					"<tr><td>DataSets Used</td><td><ul><li>refine_patient</li>\n",
					"<li>refine_visit</li>\n",
					"<li>refine_treatment</li></ul></td></tr>\n",
					"</table>"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"patientDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/patient/table/')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"doctorDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/doctor/table/')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"visitsDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/visits/table/')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"treatmentDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/treatments/table/')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"patientVisitJNRDF=patientDF.alias(\"P\").join(visitsDF.alias(\"V\"),patientDF.Patient_ID==visitsDF.Patient_ID,\"inner\").Select(F.col(\"P.Patient_ID\"),\n",
					"        F.col(\"P.Name\").alias(\"Patinet_Name\"),\n",
					"        F.col(\"V.Admission_Date\"),\n",
					"        F.col(\"V.Discharge_Date\"),\n",
					"        F.col(\"V.ICU_Stay\"),\n",
					"        F.col(\"V.Total_Cost\"))\n",
					"\n",
					"patientVisitDoctorJNRDF=patientVisitJNRDF.join(doctorDF,patientVisitJNRDF.Doctor_ID==doctorDF.Doctor_ID,\"inner\")\n",
					"\n",
					"patientVisitDoctorTreatmentJNRDF=patientVisitDoctorJNRDF.join(treatmentDF,patientVisitDoctorJNRDF.Treatment_ID==treatmentDF.Treatment_ID,\"inner\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"patientTreatmentHistoryDF=patientVisitDoctorTreatmentJNRDF.select(F.col(\"Patient_ID\"),\n",
					"    F.col(\"Patient_Name\"),\n",
					"    F.col(\"Doctor_ID\"),\n",
					"    F.col(\"Name\").alias(\"Doctor_Name\"),\n",
					"    F.col(\"Specialization\"),\n",
					"    F.col(\"Treatment_ID\"),\n",
					"    F.col(\"Treatment_Type\"),\n",
					"    F.col(\"V.Admission_Date\"),\n",
					"    F.col(\"V.Discharge_Date\"),\n",
					"    F.col(\"V.ICU_Stay\"),\n",
					"    F.col(\"V.Total_Cost\"))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delta_table_path = \"abfss://output@freefinalstorageaccount.dfs.core.windows.net/enterprise/patientTreatmentHistory/table/\"\n",
					"\n",
					"try:\n",
					"    # Try to access the Delta table\n",
					"    patientTreatmentHistoryEnterpriseDF= DeltaTable.forPath(spark, delta_table_path)\n",
					"\n",
					"    # If the table exists, perform the merge operation\n",
					"    patientTreatmentHistoryEnterpriseDF.alias(\"target\").merge(\n",
					"        patientTreatmentHistoryDF.alias(\"source\"),\n",
					"        \"target.patient_id = source.patient_id\",\n",
					"        \"target.Admission_Date = source.Admission_Date\",\n",
					"        \"target.Discharge_Date = source.Discharge_Date\"\n",
					"    ).whenMatchedUpdateAll(\n",
					"    ).whenNotMatchedInsertAll(\n",
					"    ).execute()\n",
					"\n",
					"except AnalysisException as e:\n",
					"\n",
					"    print(\"Delta table does not exist. Creating a new table...\")\n",
					"    \n",
					"    patientTreatmentHistoryDF.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
				],
				"execution_count": null
			}
		]
	}
}