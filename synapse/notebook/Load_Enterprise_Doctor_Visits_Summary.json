{
	"name": "Load_Enterprise_Doctor_Visits_Summary",
	"properties": {
		"folder": {
			"name": "Enterprise_Pipelines"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "69de31c6-fdf4-4551-a68a-51a6d6b60b5f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<center>This Notebook is used to create Patient_Treatment_History Table in Enterprise Level.</center>\n",
					"\n",
					"<table>\n",
					"<tr><th>Title</th><th>Description</th></tr>\n",
					"<tr><td>Creator</td><td>Aniket Belsare</td></tr>\n",
					"<tr><td>Reviewer</td><td>Ankit Negi</td></tr>\n",
					"<tr><td>DataSets Used</td><td><ul><li>refine_doctor</li>\n",
					"<li>refine_visit</li>\n",
					"</ul></td></tr>\n",
					"</table>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"doctorDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/doctor/table/')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"visitsDF=spark.read.format('delta').load('abfss://output@freefinalstorageaccount.dfs.core.windows.net/refine/visits/table/')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"doctorVisitJNRDF=doctorDF.alias(\"D\").join(visitsDF.alias(\"V\"),doctorDF.Doctor_ID==visitsDF.Doctor_ID,\"inner\").Select(F.col(\"D.Doctor_ID\"),\n",
					"        F.col(\"D.Name\").alias(\"Doctor_Name\"),\n",
					"        F.col(\"V.Visit_ID\"),\n",
					"        F.col(\"V.Total_Cost\"),\n",
					"        F.col(\"V.Patient_ID\"),\n",
					"        F.col(\"V.Discharge_Date\"),\n",
					"        F.col(\"V.Admission_Date\"))\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"doctorVisitSummaryDF=doctorVisitJNRDF.groupBy(\"Doctor_ID\", \"Name\") \\\n",
					"    .agg(\n",
					"        F.count(\"Visit_ID\").alias(\"Total_Visits_Attended\"),  \n",
					"        F.sum(\"Total_Cost\").alias(\"Total_Revenue_Generated\"),  \n",
					"        F.countDistinct(\"Patient_ID\").alias(\"Unique_Patients\"),  \n",
					"        F.avg(F.datediff(\"Discharge_Date\", \"Admission_Date\")).alias(\"Avg_Length_of_Stay_Per_Patient\")  \n",
					"    )"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delta_table_path = \"abfss://output@freefinalstorageaccount.dfs.core.windows.net/enterprise/doctorVisits/table/\"\n",
					"\n",
					"try:\n",
					"    # Try to access the Delta table\n",
					"    doctorVisitSummaryEnterpriseDF= DeltaTable.forPath(spark, delta_table_path)\n",
					"\n",
					"    # If the table exists, perform the merge operation\n",
					"    doctorVisitSummaryEnterpriseDF.alias(\"target\").merge(\n",
					"        doctorVisitSummaryDF.alias(\"source\"),\n",
					"        \"target.Doctor_ID = source.Doctor_ID\",\n",
					"        \"target.Name = source.Name\"\n",
					"    ).whenMatchedUpdateAll(\n",
					"    ).whenNotMatchedInsertAll(\n",
					"    ).execute()\n",
					"\n",
					"except AnalysisException as e:\n",
					"    print(\"Delta table does not exist. Creating a new table...\")\n",
					"    doctorVisitSummaryDF.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
				],
				"execution_count": null
			}
		]
	}
}